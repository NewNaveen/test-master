"""
The raw string is slightly different from a regular string,
it won’t interpret the \ character as an escape character.
This is because the regular expression engine uses \ character for its own escaping purpose."""

"""
\ Used to drop the special meaning of character following it
[] Represent a character class
^ matches the beginning
$ Matches the end
. Matches any character except newline
| Means OR (Matches with any of the characters separated by it.
? Matches zero or one occurrence
* Any number of occurrences (including 0 occurrences)
+ One or more occurrences
{} Indicate the number of occurrences of a preceding RegEx to match.
() Enclose a group of RegEx
"""
\A -- Matches if the string begins with the given character	-- \Afor -- for the world & for me

\b -- 	Matches if the word begins or ends with the given character.
        \b(string) will check for the beginning of the word and (string)\b will check for the ending of the word.
        -- \bge -- geeks , get
\B -- It is the opposite of the \b i.e. the string should not start or end with the given regex -- \Bge -- together & forge

\d -- Matches any decimal digit, this is equivalent to the set class [0-9] -- \d -- 123 , gee1

\D -- Matches any non-digit character, this is equivalent to the set class [^0-9] -- \D -- geeks & geek1

\s -- Matches any whitespace character -- \s -- gee ks , a bc a

\S -- Matches any non-whitespace character -- \S -- a bd , abcd

\w -- Matches any alphanumeric character, this is equivalent to the class [a-zA-Z0-9_]. -- 123, geek1

\W -- Matches any non-alphanumeric character -- >$ , gee<>

\Z -- Matches if the string ends with the given regex -- ab\Z -- abcdab, abababab

# Optional chars

Regular expression engine allows you to specify optional characters using the ? character.
It allows a character or character class either to present once or else not to occur.
Let’s consider the example of a word with an alternative spelling – color or colour.

https://www.geeksforgeeks.org/python-regex/